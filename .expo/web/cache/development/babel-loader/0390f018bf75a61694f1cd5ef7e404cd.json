{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/scottkerkove/Desktop/Apolis/React/NavDemo/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StackNavigator from \"./src/navigation/StackNavigator\";\nimport SplashScreen from \"./src/screens/SplashScreen\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { styles } from \"react-native-web/dist/index\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.performTimeConsumingTask = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                return setTimeout(function () {\n                  resolve('result');\n                }, 2000);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var data;\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.performTimeConsumingTask());\n\n            case 2:\n              data = _context2.sent;\n\n              if (data !== null) {\n                this.setState({\n                  isLoading: false\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isLoading) {\n        return React.createElement(SplashScreen, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '#F5FCFF'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          textAlign: 'center',\n          margin: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, \"Welcome to React Native!\"), React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          color: '#333333',\n          marginBottom: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, \"Reload the App to see a splash screen\"));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/scottkerkove/Desktop/Apolis/React/NavDemo/App.js"],"names":["React","StackNavigator","SplashScreen","styles","App","props","performTimeConsumingTask","Promise","resolve","setTimeout","state","isLoading","data","setState","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","margin","color","marginBottom","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP;AACA,OAAOC,YAAP;;;SACsBC,M;;IAGDC,G;;;;;AAEnB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAMnBC,wBANmB,GAMQ;AAAA;AAAA;AAAA;AAAA;AAAA,+CAClB,IAAIC,OAAJ,CAAY,UAACC,OAAD;AAAA,uBACjBC,UAAU,CACR,YAAM;AAAED,kBAAAA,OAAO,CAAC,QAAD,CAAP;AAAmB,iBADnB,EAER,IAFQ,CADO;AAAA,eAAZ,CADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANR;;AAGjB,UAAKE,KAAL,GAAa;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAb;AAHiB;AAIlB;;;;;;;;;;;+CAcoB,KAAKL,wBAAL,E;;;AAAbM,cAAAA,I;;AAEN,kBAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,qBAAKC,QAAL,CAAc;AAAEF,kBAAAA,SAAS,EAAE;AAAb,iBAAd;AACD;;;;;;;;;;;6BAGM;AACP,UAAI,KAAKD,KAAL,CAAWC,SAAf,EAA0B;AACxB,eAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAKG,UAAAA,IAAI,EAAE,CAAX;AACXC,UAAAA,cAAc,EAAE,QADL;AAEXC,UAAAA,UAAU,EAAE,QAFD;AAGXC,UAAAA,eAAe,EAAE;AAHN,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAGC,UAAAA,QAAQ,EAAE,EAAb;AACPC,UAAAA,SAAS,EAAE,QADJ;AAEPC,UAAAA,MAAM,EAAE;AAFD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAJF,EASE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACD,UAAAA,SAAS,EAAE,QAAZ;AACCE,UAAAA,KAAK,EAAE,SADR;AAECC,UAAAA,YAAY,EAAE;AAFf,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDATF,CADF;AAoBD;;;;EApD8BtB,KAAK,CAACuB,S;;SAAlBnB,G","sourcesContent":["import React from 'react'\nimport StackNavigator from './src/navigation/StackNavigator'\nimport SplashScreen from './src/screens/SplashScreen'\nimport {  View, Text, styles } from 'react-native'\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { isLoading: true }\n  }\n\n  performTimeConsumingTask = async() => {\n    return new Promise((resolve) =>\n      setTimeout(\n        () => { resolve('result') },\n        2000\n      )\n    );\n  }\n\n  async componentDidMount() {\n    // Preload data from an external API\n    // Preload data using AsyncStorage\n    const data = await this.performTimeConsumingTask();\n\n    if (data !== null) {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return <SplashScreen />;\n    }\n\n    return (\n      <View style={{    flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#F5FCFF'}}>\n        <Text style={{  fontSize: 20,\n              textAlign: 'center',\n              margin: 10,}}>\n          Welcome to React Native!\n        </Text>\n        <Text style={{textAlign: 'center',\n                      color: '#333333',\n                      marginBottom: 5,}}>\n          Reload the App to see a splash screen\n        </Text>\n      </View>\n    );\n\n    // return ( <StackNavigator />\n\n  }\n}"]},"metadata":{},"sourceType":"module"}